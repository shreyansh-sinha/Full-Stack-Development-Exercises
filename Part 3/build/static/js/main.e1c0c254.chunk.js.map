{"version":3,"sources":["components/Name.js","components/App.js","index.js"],"names":["Name","candidate","className","name","phoneNumber","Notification","message","baseURL","App","useState","persons","setPersons","useEffect","axios","get","then","response","console","log","data","newName","setNewName","newNumber","setNewNumber","search","setSearch","errorMessage","setErrorMessage","filterPersons","filter","person","toLowerCase","includes","trim","type","value","onChange","event","target","length","map","i","onSubmit","preventDefault","newObject","tempName","decision","window","confirm","findPerson","find","p","id","dummy","put","toString","catch","error","post","concat","setTimeout","errorMsg","onClick","delete","handleDelete","ReactDom","render","document","getElementById"],"mappings":"oMAWeA,EATF,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,UAEd,OACE,qBAAKC,UAAY,UAAjB,SACC,qBAAIA,UAAY,OAAhB,cAAyBD,EAAUE,KAAnC,IAA0CF,EAAUG,kBC6oDlDC,G,MAAe,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACtB,OAAiB,OAAd,CAACA,WAEF,qBAAKJ,UAAY,YAMjB,sBAAKA,UAAY,UAAjB,cAA6BI,EAA7B,SAKGC,EAAU,eAsLDC,EAhLH,WAAO,IAAD,EACaC,mBAAS,IADtB,mBACVC,EADU,KACDC,EADC,KAGjBC,qBAAU,WACTC,IACCC,IAAIP,GACJQ,MAAK,SAAAC,GACLC,QAAQC,IAAI,qBACZP,EAAWK,EAASG,WAEnB,IAVc,MAYaV,mBAAS,IAZtB,mBAYVW,EAZU,KAYDC,EAZC,OAaiBZ,mBAAS,IAb1B,mBAaVa,EAbU,KAaCC,EAbD,OAcWd,mBAAS,IAdpB,mBAcVe,EAdU,KAcFC,EAdE,OAeuBhB,mBAAS,MAfhC,mBAeViB,EAfU,KAeIC,EAfJ,KAuGXC,EAAgBlB,EAAQmB,QAAO,SAAAC,GAAM,OAAIA,EAAO3B,KAAK4B,cAAcC,SAASR,EAAOS,OAAOF,kBAuChG,OACE,sBAAK7B,UAAY,aAAjB,UACC,oBAAIA,UAAY,UAAhB,yBACA,cAAC,EAAD,CAAeI,QAAWoB,IAC1B,oBAAGxB,UAAY,QAAf,gCAA0C,uBAAOgC,KAAK,OAAOC,MAASX,EAAQY,SAvC5D,SAACC,GAErBZ,EAAUY,EAAMC,OAAOH,UAqCrB,OAGCP,EAAcW,OAAS,EACtB,6BACEX,EAAcY,KAAI,SAACV,EAAQW,GAAT,OACjB,qBAAIvC,UAAY,OAAhB,cAAmC4B,EAAO3B,KAA1C,MAA8BsC,QAG9B,oCACL,uBAAMvC,UAAY,aAAawC,SAlIlB,SAACL,GAChBA,EAAMM,iBASN,IAPA,IAAMC,EAAY,CACjBzC,KAAMiB,EACNhB,YAAakB,GAIVuB,GAAW,EACPJ,EAAE,EAAEA,EAAE/B,EAAQ6B,OAAOE,IACzB/B,EAAQ+B,GAAGtC,OAASiB,IACtByB,GAAW,GAIb,IAAgB,IAAbA,EAAmB,CAErB,IAAIC,EAAWC,OAAOC,QAAP,UAAkB5B,EAAlB,oDACT6B,EAAavC,EAAQwC,MAAK,SAAAC,GAAC,OAAIA,EAAEhD,OAASiB,KAC1CgC,EAAKH,EAAWG,GAEtB,IAAgB,IAAbN,EAAmB,CAErB,IAAMO,EAAK,2BAAOJ,GAAP,IAAmB7C,YAAakB,IAE3CT,IACCyC,IAAI/C,EAAU,IAAM6C,EAAGG,WAAYF,GACnCtC,MAAK,SAAAC,GACLL,EAAWD,EAAQ8B,KAAI,SAAAV,GAAM,OAAIA,EAAOsB,KAAOA,EAAKtB,EAASd,EAASG,SACtEE,EAAW,IACXE,EAAa,OAEbiC,OAAM,SAAAC,GACN9B,EAAgB8B,GAChBpC,EAAW,IACXE,EAAa,YAOdF,EAAW,IACXE,EAAa,SAOdV,IACC6C,KAAKnD,EAASqC,GACd7B,MAAK,SAAAC,GACLC,QAAQC,IAAIF,GACZL,EAAWD,EAAQiD,OAAOf,IAC1BvB,EAAW,IACXE,EAAa,IACbI,EAAgB,gBAChBiC,YAAW,WACVjC,EAAgB,QACd,QAEH6B,OAAM,SAAAC,GAEN,IAAMI,EAAWJ,EAAMzC,SAASG,KAAKsC,MACrCpC,EAAW,IACXE,EAAa,IACbI,EAAgBkC,GAChBD,YAAW,WACVjC,EAAgB,QACd,SA2DH,UACC,uBAAOzB,UAAY,QAAnB,oBAAyC,uBAAOiC,MAASf,EAASgB,SA5I7C,SAACC,GAEzBhB,EAAWgB,EAAMC,OAAOH,UA2IrB,uBACA,uBAAOjC,UAAY,QAAnB,2BAAgD,uBAAOiC,MAASb,EAAWc,SAzIvD,SAACC,GAExBd,EAAac,EAAMC,OAAOH,UAwIvB,uBACA,wBAAQD,KAAO,SAAShC,UAAY,MAApC,sBAED,oBAAIA,UAAY,WAAhB,uBACA,6BACEQ,EAAQ8B,KAAI,SAACV,EAAQW,GACrB,OAAO,gCACN,cAAC,EAAD,CAAMxC,UAAa6B,IADb,IACuB,wBAAQ5B,UAAY,MAAM4D,QAAW,kBAvDnD,SAAC7D,GAIrB,IAAgB,IAFD8C,OAAOC,QAAP,iBAAyB/C,EAAUE,KAAnC,OAEO,CAGrB,IAAIiD,EAAKnD,EAAUmD,GACfjD,EAAOF,EAAUE,KAErBU,IACCkD,OAAOxD,EAAU,IAAM6C,EAAGG,YAC1BxC,MAAK,SAAAC,GAAQ,OAAIA,EAASG,QAC1BJ,MAAK,WACLJ,EAAWD,EAAQmB,QAAO,SAACsB,GAAD,OAAOA,EAAEC,KAAOA,MAC1CzB,EAAgB,GAAD,OACXxB,EADW,iBAGfyD,YAAW,WACVjC,EAAgB,QACd,aAMJhB,EAAWD,GA6BiEsD,CAAalC,IAAxD,wBADXW,YCvpCzBwB,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.e1c0c254.chunk.js","sourcesContent":["import React from 'react'\n\nconst Name = ({candidate}) => {\n\n\treturn (\n\t\t\t<div className = 'element'>\n\t\t\t\t<li className = 'text'> {candidate.name} {candidate.phoneNumber}</li>\n\t\t\t</div>\n\t\t)\n}\n\nexport default Name","\n// import React from 'react';\n\n// /* Components Import */\n// import Course from './Course';\n\n// const App = ({ courses }) => {\n//     return (\n//       <>\n//         {courses.map((course) => \n//         <Course key={course.id} course={course} />\n//         )}\n//       </>\n//     )\n//   }\n  \n//  export default App\n\n// import React from 'react'\n// import {useState} from 'react'\n\n// import Name from './Name'\n\n// const App =(props) => {\n\t\n// \tconst [notes, setNotes] = useState(props.notes)\n// \tconst [newNote, setNewNote] = useState('')\n// \tconst [showAll, setShowAll] = useState(true)\n// \t// console.log(notes)\n\n// \tconst addNote = (event) => {\n// \t\tevent.preventDefault()\n// \t\tconst newObject = {\n// \t\t\tid: notes.length + 1,\n// \t\t\tcontent: newNote,\n// \t\t\tdate: new Date().toISOString(),\n// \t\t\timportant: Math.random() < 0.5,\n// \t\t}\n// \t\tsetNotes(notes.concat(newObject))\n// \t\t// here the original notes array\n// \t\t// is not mutated. A copy of notes\n// \t\t// is created and altering is done\n// \t\tconsole.log('button clicked', notes)\n// \t\tsetNewNote('')\n// \t}\n\n// \t// The event handler is called every time a change \n// \t// occurs in the input element.\n// \tconst handleNoteChange = (event) => {\n// \t\tconsole.log(event.target.value)\n// \t\tsetNewNote(event.target.value)\n// \t}\n\n// \tconst notesToShow = showAll\n//     ? notes\n//     : notes.filter(note => note.important)\n\n// \treturn (\n// \t\t\t<div>\n// \t\t\t\t<h1> Notes </h1>\n// \t\t\t\t<div>\n// \t\t\t\t\t<button onClick = {() => setShowAll(!showAll)}> \n// \t\t\t\t\t\tshow {showAll ? 'important': 'all'}\n// \t\t\t\t\t</button>\n// \t\t\t\t</div>\n\n\t\t\t\t\n// \t\t\t\t<ul>\n// \t\t\t\t\t{notesToShow.map((note, i) => {\n// \t\t\t\t\t\treturn <Note key = {i} note = {note} />\n// \t\t\t\t\t})}\n// \t\t\t\t</ul>\n\n// \t\t\t\t<form onSubmit = {addNote}>\n// \t\t\t\t\t<input value = {newNote} onChange={handleNoteChange}/>\n// \t\t\t\t\t<button type = 'submit'> Save </button>\n// \t\t\t\t</form>\n// \t\t\t</div>\n// \t\t)\n// }\n\n// export default App\n\n// const App = () => {\n// \tconst [persons, setPersons] = useState([\n// \t\t\t{name: 'Arto Hellas'}\n// \t\t])\n\n// \tconst [newName, setNewName] = useState('')\n\n// \tconst handleNoteChange = (event) => {\n// \t\t// console.log(event.target.value)\n// \t\tsetNewName(event.target.value)\n// \t}\n// \tconst addName = (event) => {\n// \t\tevent.preventDefault()\n// \t\t//console.log(event.target.value)\n// \t\tconst newObject = {\n// \t\t\tname: newName\n// \t\t}\n// \t\tvar tempName = false;\n\n// \t\tfor(let i=0;i<persons.length;i++) {\n// \t\t\tif(persons[i].name === newObject.name) {\n// \t\t\t\ttempName = true;\n// \t\t\t}\n// \t\t}\n// \t\tif(tempName === true) {\n// \t\t\talert('{newName} already present')\n// \t\t\tsetNewName('')\n// \t\t}\n\n// \t\telse {\n// \t\t\tsetPersons(persons.concat(newObject))\n// \t\t\tsetNewName('')\n// \t\t}\n// \t}\n\n// \treturn (\n// \t\t\t<div>\n// \t\t\t\t<h2> PhoneBook </h2>\n// \t\t\t\t<form onSubmit={addName}>\n// \t\t\t\t\tname: <input value = {newName} onChange = {handleNoteChange}/>\n// \t\t\t\t\t<button type = 'submit'> Add </button>\n// \t\t\t\t</form>\n// \t\t\t\t<h2> Names </h2>\n// \t\t\t\t<ul>\n// \t\t\t\t\t{persons.map((name, i) => {\n// \t\t\t\t\t\treturn <Name key = {i} person = {name} />\n// \t\t\t\t\t})}\n// \t\t\t\t</ul>\n// \t\t\t</div>\t\n// \t\t)\n// }\n\n\n//export default App\n// import React from 'react'\n// import {useState} from 'react'\n\n// import Name from './Name'\n\n// const App = () => {\n//   const [persons, setPersons] = useState([\n//     { name: 'Arto Hellas', phno: '040-123456' },\n//     { name: 'Ada Lovelace', phno: '39-44-5323523' },\n//     { name: 'Dan Abramov', phno: '12-43-234345' },\n//     { name: 'Mary Poppendieck', phno: '39-23-6423122' }\n//   ])\n\n// \tconst [newName, setNewName] = useState('')\n// \tconst [newNumber, setNewNumber] = useState('')\n\n// \tconst handleNoteChange = (event) => {\n// \t\t// console.log(event.target.value)\n// \t\tsetNewName(event.target.value)\n// \t}\n\n// \tconst handleNumChange = (event) => {\n// \t\tconsole.log(event.target)\n// \t\tsetNewNumber(event.target.value)\n// \t}\n// \tconst addData = (event) => {\n// \t\tevent.preventDefault()\n// \t\t//console.log(event.target.value)\n// \t\tconst newObject = {\n// \t\t\tname: newName,\n// \t\t\tphno: newNumber\n// \t\t}\n// \t\tvar tempName = false;\n\n// \t\tfor(let i=0;i<persons.length;i++) {\n// \t\t\tif(persons[i].name === newObject.name) {\n// \t\t\t\ttempName = true;\n// \t\t\t}\n// \t\t}\n// \t\tif(tempName === true) {\n// \t\t\talert(`${newName} already present`)\n// \t\t\tsetNewName('')\n// \t\t\tsetNewNumber('')\n// \t\t}\n\n// \t\telse {\n// \t\t\tsetPersons(persons.concat(newObject))\n// \t\t\tsetNewName('')\n// \t\t\tsetNewNumber('')\n// \t\t}\n// \t}\n\n// \treturn (\n// \t\t\t<div>\n// \t\t\t\t<h2> PhoneBook </h2>\n\n// \t\t\t\t<form onSubmit={addData}>\n// \t\t\t\t\tname: <input value = {newName} onChange = {handleNoteChange}/>\n// \t\t\t\t\t<br/>\n// \t\t\t\t\tnumber: <input value = {newNumber} onChange = {handleNumChange}/>\n// \t\t\t\t\t<br/>\n// \t\t\t\t\t<button type = 'submit'> Add </button>\n// \t\t\t\t</form>\n// \t\t\t\t<h2> Names </h2>\n// \t\t\t\t<ul>\n// \t\t\t\t\t{persons.map((name, i) => {\n// \t\t\t\t\t\treturn <Name key = {i} person = {name} />\n// \t\t\t\t\t})}\n// \t\t\t\t</ul>\n// \t\t\t</div>\t\n// \t\t)\n// }\n\n// export default App\n\n// import React, { useState, useEffect } from 'react'\n// import axios from 'axios'\n// import Note from './Note'\n\n\n/*\nWhat does useEffect do? By using this Hook, you tell React that your \ncomponent needs to do something after render. React will remember \nthe function you passed (we’ll refer to it as our “effect”), \nand call it later after performing the DOM updates\n*/\n\n//The Effect Hook lets you perform side effects in function components.\n\n//By default, effects run after every completed render\n\n/*\nuseEffect takes two parameters\nparameter1: the function which runs on each successful render\nparameter2: The second parameter of useEffect is used to specify how often \n\t\t\tthe effect is run. If the second parameter is an empty array [], \n\t\t\tthen the effect is only run along with the first render of the \n\t\t\tcomponent.\n*/\n// const App = () => {\n//   const [notes, setNotes] = useState([])\n//   const [newNote, setNewNote] = useState('')\n//   const [showAll, setShowAll] = useState(true)\n\n//   // default setup\n//   // useEffect(() => {\n//   //   console.log('effect')\n//   //   axios\n//   //     .get('http://localhost:3001/notes')\n//   //     .then(response => {\n//   //       console.log('promise fulfilled')\n//   //       setNotes(response.data)\n//   //     })\n//   // }, [])\n\n\n//   //type 2\n//   // const hook = () => {\n//   // \tconsole.log('effect')\n//   // \taxios\n//   // \t.get('http://localhost:3001/notes')\n//   // \t.then(response => {\n//   // \t\tconsole.log('promise fulfilled')\n//   // \t\tsetNotes(response.data)\n//   // \t})\n//   // }\n\n//   // useEffect(hook, [])\n\n//   //type 3\n//   useEffect(() => {\n//   \tconsole.log('effect')\n\n//   \tconst eventHandler = (response) => {\n//   \t\tconsole.log('response fulfilled')\n//   \t\tsetNotes(response.data)\n//   \t}\n\n//   \tconst promise = axios.get('http://localhost:3001/notes')\n//   \tpromise.then(eventHandler)\n//   }, [])\n\n//   console.log('render', notes.length, 'notes')\n\n//   return (\n//   \t\t<div></div>\n//   \t)\n// }\n\n// export default App\n\n// import React, { useState, useEffect } from 'react'\n// import axios from 'axios'\n// import Name from './Name'\n// const App = () => {\n// \tconst [persons, setPersons] = useState([])\n\n// \tuseEffect(() => {\n// \t\taxios\n// \t\t.get('http://localhost:3001/persons')\n// \t\t.then(response => {\n// \t\t\tconsole.log('promise fulfilled')\n// \t\t\tsetPersons(response.data)\n// \t\t})\n// \t}, [])\n\n// \tconst [newName, setNewName] = useState('')\n// \tconst [newNumber, setNewNumber] = useState('')\n\n// \tconst handleNoteChange = (event) => {\n// \t\t// console.log(event.target.value)\n// \t\tsetNewName(event.target.value)\n// \t}\n\n// \tconst handleNumChange = (event) => {\n// \t\t// console.log(event.target)\n// \t\tsetNewNumber(event.target.value)\n// \t}\n// \tconst addData = (event) => {\n// \t\tevent.preventDefault()\n// \t\t//console.log(event.target.value)\n// \t\tconst newObject = {\n// \t\t\tname: newName,\n// \t\t\tphno: newNumber\n// \t\t}\n// \t\tvar tempName = false;\n\n// \t\tfor(let i=0;i<persons.length;i++) {\n// \t\t\tif(persons[i].name === newObject.name) {\n// \t\t\t\ttempName = true;\n// \t\t\t}\n// \t\t}\n// \t\tif(tempName === true) {\n// \t\t\talert(`${newName} already present`)\n// \t\t\tsetNewName('')\n// \t\t\tsetNewNumber('')\n// \t\t}\n\n// \t\telse {\n// \t\t\tsetPersons(persons.concat(newObject))\n// \t\t\tsetNewName('')\n// \t\t\tsetNewNumber('')\n// \t\t}\n// \t}\n\n// \treturn (\n// \t\t\t<div>\n// \t\t\t\t<h2> PhoneBook </h2>\n\n// \t\t\t\t<form onSubmit={addData}>\n// \t\t\t\t\tname: <input value = {newName} onChange = {handleNoteChange}/>\n// \t\t\t\t\t<br/>\n// \t\t\t\t\tnumber: <input value = {newNumber} onChange = {handleNumChange}/>\n// \t\t\t\t\t<br/>\n// \t\t\t\t\t<button type = 'submit'> Add </button>\n// \t\t\t\t</form>\n// \t\t\t\t<h2> Names </h2>\n// \t\t\t\t<ul>\n// \t\t\t\t\t{persons.map((name, i) => {\n// \t\t\t\t\t\treturn <Name key = {i} person = {name} />\n// \t\t\t\t\t})}\n// \t\t\t\t</ul>\n// \t\t\t</div>\n// \t\t)\n// }\n\n// export default App\n\n// import React, { useState, useEffect } from 'react'\n// import axios from 'axios'\n\n// import Country from './Country'\n// const App = () => {\n// \tconst [country, setCountry] = useState([])\n\t\n// \tuseEffect(() => {\n// \t\taxios\n// \t\t.get('https://restcountries.eu/rest/v2/all')\n// \t\t.then(response => {\n// \t\t\tconsole.log(response.data)\n// \t\t\tsetCountry(response.data.map(country => country))\n// \t\t})\n// \t}, [])\n\n\n\n// \tconst [newCountry, setNewCountry] = useState('')\n\n// \tconst searchCountry = (event) => {\n// \t\tconst query = event.target.value\n// \t\tsetNewCountry(query)\n// \t}\n\n// \tconst allCountries = country.map((country, i) => <li key = {i}> {country.name} </li>)\n\n// \tconst filterCountries = country.filter(country => country.name.toLowerCase().includes(newCountry.trim().toLowerCase()))\n// \treturn (\n// \t\t\t\t<div>\n\t\t\t\t\n// \t\t\t\t\t<h1> final Countries </h1> <input type=\"text\" value = {newCountry} onChange = {searchCountry}/>\n// \t\t\t\t\t{filterCountries.length > 10 ? (\n// \t\t\t\t\t\t<div> To many matches </div>\n// \t\t\t\t\t\t) : filterCountries.length > 1 && filterCountries.length < 10 ? (\n// \t\t\t\t            <div>\n// \t\t\t\t            {filterCountries.map((country, i) => (\n// \t\t\t\t              <div key={i}>{country.name}</div>\n// \t\t\t\t            ))}\n// \t\t\t\t          </div>\t\n// \t\t\t\t\t\t):filterCountries.length == 1 ? (\n// \t\t\t\t\t\t\t<Country countryFound = {filterCountries} />\n// \t\t\t\t\t\t) : (\n// \t\t\t\t\t\t\t<div> Can't find country </div>\n// \t\t\t\t\t\t)}\n// \t\t\t\t</div>\t\n// \t\t\t)\n// }\n\n// export default App\n\n// import React, { useState, useEffect } from 'react'\n// import axios from 'axios'\n\n// import Country from './Country'\n// const App = () => {\n// \tconst [country, setCountry] = useState([])\n// \tconst [newCountry, setNewCountry] = useState('')\n\t\n\n// \tuseEffect(() => {\n// \t\taxios\n// \t\t.get('https://restcountries.eu/rest/v2/all')\n// \t\t.then(response => {\n// \t\t\tconsole.log(response.data)\n// \t\t\tsetCountry(response.data.map(country => country))\n// \t\t})\n// \t}, [])\n\n\n// \tconst searchCountry = (event) => {\n// \t\tconst query = event.target.value\n// \t\tsetNewCountry(query)\n// \t}\n\n// \tconst allCountries = country.map((country, i) => <li key = {i}> {country.name} </li>)\n\n// \tconst filterCountries = country.filter(country => country.name.toLowerCase().includes(newCountry.trim().toLowerCase()))\n\t\n// \tconst onShowCountryDetails = (country) => {\n// \t\tsetNewCountry(country.name)\n// \t}\n\n// \treturn (\n// \t\t\t\t<div>\n\t\t\t\t\n// \t\t\t\t\t<h1> Find Countries </h1> <input type=\"text\" value = {newCountry} onChange = {searchCountry}/>\n// \t\t\t\t\t{filterCountries.length > 10 ? (\n// \t\t\t\t\t\t<div> To many matches </div>\n// \t\t\t\t\t\t) : filterCountries.length > 1 && filterCountries.length < 10 ? (\n// \t\t\t\t            <div>\n// \t\t\t\t            {filterCountries.map((country, i) => (\n// \t\t\t\t            \t<div key={i}>\n// \t\t\t\t\t\t            \t{country.name} <button onClick = {() => onShowCountryDetails(country)}> SHOW </button> \n\t\t\t\t\t\t            \t\n// \t\t\t\t              \t</div>\n\n\t\t\t\t              \t\n// \t\t\t\t            ))}\n// \t\t\t\t          </div>\t\n// \t\t\t\t\t\t):filterCountries.length == 1 ? (\n// \t\t\t\t\t\t\t<Country countryFound = {filterCountries} />\n// \t\t\t\t\t\t) : (\n// \t\t\t\t\t\t\t<div> Can't find country </div>\n// \t\t\t\t\t\t)}\n// \t\t\t\t</div>\t\n// \t\t\t)\n// }\n\n// export default App\n\n// import React, { useState, useEffect } from 'react'\n// import axios from 'axios'\n// import Name from './Name'\n// const App = () => {\n// \tconst [persons, setPersons] = useState([])\n\n// \tuseEffect(() => {\n// \t\taxios\n// \t\t.get('http://localhost:3001/persons')\n// \t\t.then(response => {\n// \t\t\tconsole.log('promise fulfilled')\n// \t\t\tsetPersons(response.data)\n// \t\t})\n// \t}, [])\n\n// \tconst [newName, setNewName] = useState('')\n// \tconst [newNumber, setNewNumber] = useState('')\n// \tconst [search, setSearch] = useState('')\n// \tconst handleNoteChange = (event) => {\n// \t\t// console.log(event.target.value)\n// \t\tsetNewName(event.target.value)\n// \t}\n\n// \tconst handleNumChange = (event) => {\n// \t\t// console.log(event.target)\n// \t\tsetNewNumber(event.target.value)\n// \t}\n// \tconst addData = (event) => {\n// \t\tevent.preventDefault()\n// \t\t//console.log(event.target.value)\n// \t\tconst newObject = {\n// \t\t\tname: newName,\n// \t\t\tphno: newNumber\n// \t\t}\n// \t\tvar tempName = false;\n\n// \t\tfor(let i=0;i<persons.length;i++) {\n// \t\t\tif(persons[i].name === newObject.name) {\n// \t\t\t\ttempName = true;\n// \t\t\t}\n// \t\t}\n// \t\tif(tempName === true) {\n// \t\t\talert(`${newName} already present`)\n// \t\t\tsetNewName('')\n// \t\t\tsetNewNumber('')\n// \t\t}\n\n// \t\telse {\n// \t\t\tsetPersons(persons.concat(newObject))\n// \t\t\tsetNewName('')\n// \t\t\tsetNewNumber('')\n// \t\t}\n// \t}\n\n// \tconst filterPersons = persons.filter(person => person.name.toLowerCase().includes(search.trim().toLowerCase())) \n\t\n// \t// console.log(filterPersons)\n\t\n// \tconst searchPerson = (event) => {\n// \t\tconsole.log(event.target.value)\n// \t\tsetSearch(event.target.value)\n// \t}\n\n// \treturn (\n// \t\t\t<div>\n// \t\t\t\t<h2> PhoneBook </h2>\n\n// \t\t\t\t<p> filter shown with <input type=\"text\" value = {search} onChange = {searchPerson}/> </p> \n\t\t\t\t\n// \t\t\t\t{filterPersons.length > 0 ? (\n// \t\t\t\t\t\t<ul>\n// \t\t\t\t\t\t\t{filterPersons.map((person, i) => \n// \t\t\t\t\t\t\t\t\t<li key = {i}> {person.name} </li> \n// \t\t\t\t\t\t\t\t)}\n// \t\t\t\t\t\t</ul>\t\n// \t\t\t\t\t) : <div> </div>}\n// \t\t\t\t<form onSubmit={addData}>\n// \t\t\t\t\tname: <input value = {newName} onChange = {handleNoteChange}/>\n// \t\t\t\t\t<br/>\n// \t\t\t\t\tnumber: <input value = {newNumber} onChange = {handleNumChange}/>\n// \t\t\t\t\t<br/>\n// \t\t\t\t\t<button type = 'submit'> Add </button>\n// \t\t\t\t</form>\n// \t\t\t\t<h2> Names </h2>\n// \t\t\t\t<ul>\n// \t\t\t\t\t{persons.map((name, i) => {\n// \t\t\t\t\t\treturn <Name key = {i} person = {name} />\n// \t\t\t\t\t})}\n// \t\t\t\t</ul>\n// \t\t\t</div>\n// \t\t)\n// }\n\n// export default App\n\n\n\n//import React, { useState, useEffect } from 'react'\n// import axios from 'axios'\n// import Name from './Name'\n// const App = () => {\n// \tconst [persons, setPersons] = useState([])\n\n// \tuseEffect(() => {\n// \t\taxios\n// \t\t.get('http://localhost:3001/persons')\n// \t\t.then(response => {\n// \t\t\tconsole.log('promise fulfilled')\n// \t\t\tsetPersons(response.data)\n// \t\t})\n// \t}, [])\n\n// \tconst [newName, setNewName] = useState('')\n// \tconst [newNumber, setNewNumber] = useState('')\n// \tconst [search, setSearch] = useState('')\n// \tconst handleNoteChange = (event) => {\n// \t\t// console.log(event.target.value)\n// \t\tsetNewName(event.target.value)\n// \t}\n\n// \tconst handleNumChange = (event) => {\n// \t\t// console.log(event.target)\n// \t\tsetNewNumber(event.target.value)\n// \t}\n// \tconst addData = (event) => {\n// \t\tevent.preventDefault()\n// \t\t//console.log(event.target.value)\n// \t\tconst newObject = {\n// \t\t\tname: newName,\n// \t\t\tphno: newNumber\n// \t\t}\n// \t\tvar tempName = false;\n\n// \t\tfor(let i=0;i<persons.length;i++) {\n// \t\t\tif(persons[i].name === newObject.name) {\n// \t\t\t\ttempName = true;\n// \t\t\t}\n// \t\t}\n// \t\tif(tempName === true) {\n// \t\t\talert(`${newName} already present`)\n// \t\t\tsetNewName('')\n// \t\t\tsetNewNumber('')\n// \t\t}\n\n// \t\telse {\n// \t\t\t// setPersons(persons.concat(newObject))\n// \t\t\t// setNewName('')\n// \t\t\t// setNewNumber('')\n\n// \t\t\taxios\n// \t\t\t.post(\"http://localhost:3001/persons\", newObject)\n// \t\t\t.then(response => {\n// \t\t\t\tconsole.log(response)\n// \t\t\t\tsetPersons(persons.concat(newObject))\n// \t\t\t\tsetNewName('')\n// \t\t\t\tsetNewNumber('')\n// \t\t\t})\n// \t\t}\n// \t}\n\n// \tconst filterPersons = persons.filter(person => person.name.toLowerCase().includes(search.trim().toLowerCase())) \n\t\n// \t// console.log(filterPersons)\n\t\n// \tconst searchPerson = (event) => {\n// \t\tconsole.log(event.target.value)\n// \t\tsetSearch(event.target.value)\n// \t}\n\n// \treturn (\n// \t\t\t<div>\n// \t\t\t\t<h2> PhoneBook </h2>\n\n// \t\t\t\t<p> filter shown with <input type=\"text\" value = {search} onChange = {searchPerson}/> </p> \n\t\t\t\t\n// \t\t\t\t{filterPersons.length > 0 ? (\n// \t\t\t\t\t\t<ul>\n// \t\t\t\t\t\t\t{filterPersons.map((person, i) => \n// \t\t\t\t\t\t\t\t\t<li key = {i}> {person.name} </li> \n// \t\t\t\t\t\t\t\t)}\n// \t\t\t\t\t\t</ul>\t\n// \t\t\t\t\t) : <div> </div>}\n// \t\t\t\t<form onSubmit={addData}>\n// \t\t\t\t\tname: <input value = {newName} onChange = {handleNoteChange}/>\n// \t\t\t\t\t<br/>\n// \t\t\t\t\tnumber: <input value = {newNumber} onChange = {handleNumChange}/>\n// \t\t\t\t\t<br/>\n// \t\t\t\t\t<button type = 'submit'> Add </button>\n// \t\t\t\t</form>\n// \t\t\t\t<h2> Names </h2>\n// \t\t\t\t<ul>\n// \t\t\t\t\t{persons.map((name, i) => {\n// \t\t\t\t\t\treturn <Name key = {i} person = {name} />\n// \t\t\t\t\t})}\n// \t\t\t\t</ul>\n// \t\t\t</div>\n// \t\t)\n// }\n\n// export default App\n\n// import React, { useState, useEffect } from 'react'\n// import axios from 'axios'\n// import Name from './Name'\n// const App = () => {\n// \tconst [persons, setPersons] = useState([])\n\n// \tuseEffect(() => {\n// \t\taxios\n// \t\t.get('http://localhost:3001/persons')\n// \t\t.then(response => {\n// \t\t\tconsole.log('promise fulfilled')\n// \t\t\tsetPersons(response.data)\n// \t\t})\n// \t}, [])\n\n// \tconst [newName, setNewName] = useState('')\n// \tconst [newNumber, setNewNumber] = useState('')\n// \tconst [search, setSearch] = useState('')\n// \tconst handleNoteChange = (event) => {\n// \t\t// console.log(event.target.value)\n// \t\tsetNewName(event.target.value)\n// \t}\n\n// \tconst handleNumChange = (event) => {\n// \t\t// console.log(event.target)\n// \t\tsetNewNumber(event.target.value)\n// \t}\n// \tconst addData = (event) => {\n// \t\tevent.preventDefault()\n// \t\t//console.log(event.target.value)\n// \t\tconst newObject = {\n// \t\t\tname: newName,\n// \t\t\tnumber: newNumber\n// \t\t}\n// \t\tvar tempName = false;\n\n// \t\tfor(let i=0;i<persons.length;i++) {\n// \t\t\tif(persons[i].name === newObject.name) {\n// \t\t\t\ttempName = true;\n// \t\t\t}\n// \t\t}\n// \t\tif(tempName === true) {\n// \t\t\talert(`${newName} already present`)\n// \t\t\tsetNewName('')\n// \t\t\tsetNewNumber('')\n// \t\t}\n\n// \t\telse {\n// \t\t\t// setPersons(persons.concat(newObject))\n// \t\t\t// setNewName('')\n// \t\t\t// setNewNumber('')\n\n// \t\t\taxios\n// \t\t\t.post(\"http://localhost:3001/persons\", newObject)\n// \t\t\t.then(response => {\n// \t\t\t\tconsole.log(response)\n// \t\t\t\tsetPersons(persons.concat(newObject))\n// \t\t\t\tsetNewName('')\n// \t\t\t\tsetNewNumber('')\n// \t\t\t})\n// \t\t}\n// \t}\n\n// \tconst filterPersons = persons.filter(person => person.name.toLowerCase().includes(search.trim().toLowerCase())) \n\t\n// \t// console.log(filterPersons)\n\t\n// \tconst searchPerson = (event) => {\n// \t\tconsole.log(event.target.value)\n// \t\tsetSearch(event.target.value)\n// \t}\n\n// \tconst handleDelete = (candidate) => {\n\n// \t\tvar decision = window.confirm(`Delete ${candidate.name} ?`)\n\n// \t\tif(decision === true) {\n\n\t\t\t\n// \t\t\tvar id = candidate.id\n// \t\t\tconsole.log(id)\n\n// \t\t\taxios\n// \t\t\t.delete(`http://localhost:3001/persons/${id}`)\n// \t\t\t.then(response => response.data)\n// \t\t\t.then(() => setPersons(persons.filter((p) => p.id !== id)))\t\n\t\t\t\t\n\n// \t\t}\n// \t\telse \n// \t\t\tsetPersons(persons)\n\n// \t}\n\n// \treturn (\n// \t\t\t<div>\n// \t\t\t\t<h2> PhoneBook </h2>\n\n// \t\t\t\t<p> filter shown with <input type=\"text\" value = {search} onChange = {searchPerson}/> </p> \n\t\t\t\t\n// \t\t\t\t{filterPersons.length > 0 ? (\n// \t\t\t\t\t\t<ul>\n// \t\t\t\t\t\t\t{filterPersons.map((person, i) => \n// \t\t\t\t\t\t\t\t\t<li key = {i}> {person.name} </li> \n// \t\t\t\t\t\t\t\t)}\n// \t\t\t\t\t\t</ul>\t\n// \t\t\t\t\t) : <div> </div>}\n// \t\t\t\t<form onSubmit={addData}>\n// \t\t\t\t\tname: <input value = {newName} onChange = {handleNoteChange}/>\n// \t\t\t\t\t<br/>\n// \t\t\t\t\tnumber: <input value = {newNumber} onChange = {handleNumChange}/>\n// \t\t\t\t\t<br/>\n// \t\t\t\t\t<button type = 'submit'> Add </button>\n// \t\t\t\t</form>\n// \t\t\t\t<h2> Numbers </h2>\n// \t\t\t\t<ul>\n// \t\t\t\t\t{persons.map((person, i) => {\n// \t\t\t\t\t\treturn <div key = {i}>\n// \t\t\t\t\t\t\t<Name  candidate = {person} /> <button onClick = {() => handleDelete(person)}> DELETE </button>\n\t\t\t\t\t\t\t\n// \t\t\t\t\t\t</div>\n// \t\t\t\t\t})}\n// \t\t\t\t</ul>\n// \t\t\t</div>\n// \t\t)\n// }\n\n// export default App\n\n// import React, { useState, useEffect } from 'react'\n// import axios from 'axios'\n// import Name from './Name'\n\n// const App = () => {\n// \tconst [persons, setPersons] = useState([])\n\n// \tuseEffect(() => {\n// \t\taxios\n// \t\t.get('http://localhost:3001/persons')\n// \t\t.then(response => {\n// \t\t\tconsole.log('promise fulfilled')\n// \t\t\tsetPersons(response.data)\n// \t\t})\n// \t}, [])\n\n// \tconst [newName, setNewName] = useState('')\n// \tconst [newNumber, setNewNumber] = useState('')\n// \tconst [search, setSearch] = useState('')\n// \tconst handleNoteChange = (event) => {\n// \t\t// console.log(event.target.value)\n// \t\tsetNewName(event.target.value)\n// \t}\n\n// \tconst handleNumChange = (event) => {\n// \t\t// console.log(event.target)\n// \t\tsetNewNumber(event.target.value)\n// \t}\n// \tconst addData = (event) => {\n// \t\tevent.preventDefault()\n// \t\t//console.log(event.target.value)\n// \t\tconst newObject = {\n// \t\t\tname: newName,\n// \t\t\tnumber: newNumber,\n\t\t\t\n// \t\t}\n\n// \t\tvar tempName = false;\n// \t\tfor(let i=0;i<persons.length;i++) {\n// \t\t\tif(persons[i].name === newName) {\n// \t\t\t\ttempName = true;\n// \t\t\t}\n// \t\t}\n\n// \t\tif(tempName === true) {\n\n// \t\t\tvar decision = window.confirm(`${newName} already present, replace number with new one ?`)\n// \t\t\tconst findPerson = persons.find(p => p.name === newName)\n// \t\t\tconst id = findPerson.id\n\n// \t\t\tif(decision === true) {\n\t\t\t\t\n// \t\t\t\tconst dummy = {...findPerson, number: newNumber}\n\n// \t\t\t\taxios\n// \t\t\t\t.put(`http://localhost:3001/persons/${id}`, dummy)\n// \t\t\t\t.then(response => {\n// \t\t\t\t\tsetPersons(persons.map(person => person.id !== id ? person : response.data))\n// \t\t\t\t\tsetNewName('')\n// \t\t\t\t\tsetNewNumber('')\n// \t\t\t\t})\n\t\t\t\t\n\t\t\t\t\n// \t\t\t}\n\n// \t\t\telse {\n// \t\t\t\tsetNewName('')\n// \t\t\t\tsetNewNumber('')\n// \t\t\t}\n\n// \t\t}\n\n// \t\telse {\n\n// \t\t\taxios\n// \t\t\t.post(\"http://localhost:3001/persons\", newObject)\n// \t\t\t.then(response => {\n// \t\t\t\tconsole.log(response)\n// \t\t\t\tsetPersons(persons.concat(newObject))\n// \t\t\t\tsetNewName('')\n// \t\t\t\tsetNewNumber('')\n// \t\t\t})\n// \t\t}\n// \t}\n\n// \tconst filterPersons = persons.filter(person => person.name.toLowerCase().includes(search.trim().toLowerCase())) \n\t\n// \t// console.log(filterPersons)\n\t\n// \tconst searchPerson = (event) => {\n// \t\tconsole.log(event.target.value)\n// \t\tsetSearch(event.target.value)\n// \t}\n\n// \tconst handleDelete = (candidate) => {\n\n// \t\tvar decision = window.confirm(`Delete ${candidate.name} ?`)\n\n// \t\tif(decision === true) {\n\n\t\t\t\n// \t\t\tvar id = candidate.id\n// \t\t\tconsole.log(id)\n\n// \t\t\taxios\n// \t\t\t.delete(`http://localhost:3001/persons/${id}`)\n// \t\t\t.then(response => response.data)\n// \t\t\t.then(() => setPersons(persons.filter((p) => p.id !== id)))\t\n\t\t\t\t\n\n// \t\t}\n// \t\telse \n// \t\t\tsetPersons(persons)\n\n// \t}\n\n// \treturn (\n// \t\t\t<div>\n// \t\t\t\t<h2> PhoneBook </h2>\n\n// \t\t\t\t<p> filter shown with <input type=\"text\" value = {search} onChange = {searchPerson}/> </p> \n\n\t\t\t\t\n// \t\t\t\t{filterPersons.length > 0 ? (\n// \t\t\t\t\t\t<ul>\n// \t\t\t\t\t\t\t{filterPersons.map((person, i) => \n// \t\t\t\t\t\t\t\t\t<li key = {i}> {person.name} </li> \n// \t\t\t\t\t\t\t\t)}\n// \t\t\t\t\t\t</ul>\t\n// \t\t\t\t\t) : <div> </div>}\n// \t\t\t\t<form onSubmit={addData}>\n// \t\t\t\t\tname: <input value = {newName} onChange = {handleNoteChange}/>\n// \t\t\t\t\t<br/>\n// \t\t\t\t\tnumber: <input value = {newNumber} onChange = {handleNumChange}/>\n// \t\t\t\t\t<br/>\n// \t\t\t\t\t<button type = 'submit'> Add </button>\n// \t\t\t\t</form>\n// \t\t\t\t<h2> Numbers </h2>\n// \t\t\t\t<ul>\n// \t\t\t\t\t{persons.map((person, i) => {\n// \t\t\t\t\t\treturn <div key = {i}>\n// \t\t\t\t\t\t\t<Name  candidate = {person} /> <button onClick = {() => handleDelete(person)}> DELETE </button>\n\t\t\t\t\t\t\t\n// \t\t\t\t\t\t</div>\n// \t\t\t\t\t})}\n// \t\t\t\t</ul>\n// \t\t\t</div>\n// \t\t)\n// }\n\n// export default App\n\n// import React, { useState, useEffect } from 'react'\n// import axios from 'axios'\n// import Name from './Name'\n// import './app.css'\n\n// const Notification = ({message}) => {\n\n// \tif(message === null)\n// \t\treturn null\n// \treturn (\n// \t\t\t<div className = \"message\"> {message} </div>\n// \t\t)\n// }\n// const App = () => {\n// \tconst [persons, setPersons] = useState([])\n\n// \tuseEffect(() => {\n// \t\taxios\n// \t\t.get('http://localhost:3001/persons')\n// \t\t.then(response => {\n// \t\t\tconsole.log('promise fulfilled')\n// \t\t\tsetPersons(response.data)\n// \t\t})\n// \t}, [])\n\n// \tconst [newName, setNewName] = useState('')\n// \tconst [newNumber, setNewNumber] = useState('')\n// \tconst [search, setSearch] = useState('')\n// \tconst [errorMessage, setErrorMessage] = useState(null)\n// \tconst handleNoteChange = (event) => {\n// \t\t// console.log(event.target.value)\n// \t\tsetNewName(event.target.value)\n// \t}\n\n// \tconst handleNumChange = (event) => {\n// \t\t// console.log(event.target)\n// \t\tsetNewNumber(event.target.value)\n// \t}\n// \tconst addData = (event) => {\n// \t\tevent.preventDefault()\n// \t\t//console.log(event.target.value)\n// \t\tconst newObject = {\n// \t\t\tname: newName,\n// \t\t\tnumber: newNumber,\n\t\t\t\n// \t\t}\n\n// \t\tvar tempName = false;\n// \t\tfor(let i=0;i<persons.length;i++) {\n// \t\t\tif(persons[i].name === newName) {\n// \t\t\t\ttempName = true;\n// \t\t\t}\n// \t\t}\n\n// \t\tif(tempName === true) {\n\n// \t\t\tvar decision = window.confirm(`${newName} already present, replace number with new one ?`)\n// \t\t\tconst findPerson = persons.find(p => p.name === newName)\n// \t\t\tconst id = findPerson.id\n\n// \t\t\tif(decision === true) {\n\t\t\t\t\n// \t\t\t\tconst dummy = {...findPerson, number: newNumber}\n\n// \t\t\t\taxios\n// \t\t\t\t.put(`http://localhost:3001/persons/${id}`, dummy)\n// \t\t\t\t.then(response => {\n// \t\t\t\t\tsetPersons(persons.map(person => person.id !== id ? person : response.data))\n// \t\t\t\t\tsetNewName('')\n// \t\t\t\t\tsetNewNumber('')\n// \t\t\t\t})\n\t\t\t\t\n\t\t\t\t\n// \t\t\t}\n\n// \t\t\telse {\n// \t\t\t\tsetNewName('')\n// \t\t\t\tsetNewNumber('')\n// \t\t\t}\n\n// \t\t}\n\n// \t\telse {\n\n// \t\t\taxios\n// \t\t\t.post(\"http://localhost:3001/persons\", newObject)\n// \t\t\t.then(response => {\n// \t\t\t\tconsole.log(response)\n// \t\t\t\tsetPersons(persons.concat(newObject))\n// \t\t\t\tsetNewName('')\n// \t\t\t\tsetNewNumber('')\n// \t\t\t\tsetErrorMessage(\n// \t\t\t\t\t\t`Person ${newObject.name} added`\n// \t\t\t\t\t)\n// \t\t\t\tsetTimeout(() => {\n// \t\t\t\t\tsetErrorMessage(null)\n// \t\t\t\t}, 5000)\n\n// \t\t\t})\n// \t\t}\n// \t}\n\n// \tconst filterPersons = persons.filter(person => person.name.toLowerCase().includes(search.trim().toLowerCase())) \n\t\n// \t// console.log(filterPersons)\n\t\n// \tconst searchPerson = (event) => {\n// \t\tconsole.log(event.target.value)\n// \t\tsetSearch(event.target.value)\n// \t}\n\n// \tconst handleDelete = (candidate) => {\n\n// \t\tvar decision = window.confirm(`Delete ${candidate.name} ?`)\n\n// \t\tif(decision === true) {\n\n\t\t\t\n// \t\t\tvar id = candidate.id\n// \t\t\tconsole.log(id)\n\n// \t\t\taxios\n// \t\t\t.delete(`http://localhost:3001/persons/${id}`)\n// \t\t\t.then(response => response.data)\n// \t\t\t.then(() => setPersons(persons.filter((p) => p.id !== id)))\t\n\t\t\t\t\n\n// \t\t}\n// \t\telse \n// \t\t\tsetPersons(persons)\n\n// \t}\n\n// \treturn (\n// \t\t\t<div>\n// \t\t\t\t<h2> PhoneBook </h2>\n\n// \t\t\t\t<Notification message = {errorMessage}/>\n// \t\t\t\t<p> filter shown with <input type=\"text\" value = {search} onChange = {searchPerson}/> </p> \n\n// \t\t\t\t<form onSubmit={addData}>\n// \t\t\t\t\tname: <input value = {newName} onChange = {handleNoteChange}/>\n// \t\t\t\t\t<br/>\n// \t\t\t\t\tnumber: <input value = {newNumber} onChange = {handleNumChange}/>\n// \t\t\t\t\t<br/>\n// \t\t\t\t\t<button type = 'submit'> Add </button>\n// \t\t\t\t</form>\n// \t\t\t</div>\n// \t\t)\n// }\n\n// export default App\n\n// import React, { useState, useEffect } from 'react'\n// import axios from 'axios'\n// import Name from './Name'\n\n// const Notification = ({message}) => {\n// \tif({message} === null) {\n// \t\treturn null\n// \t}\n\n// \treturn (\n// \t\t<div>\n// \t\t\t<div> {message} </div>\n// \t\t</div>\n// \t\t)\n// }\n\n// const baseURL = '/api/persons'\n// const getAll = () => {\n// \tconst request = axios.get(baseURL)\n// \treturn request.then(response => response.data)\n\n// }\n// const App = () => {\n// \tconst [persons, setPersons] = useState([])\n\n// \tuseEffect(() => {\n// \t\taxios\n// \t\t.get(baseURL)\n// \t\t.then(response => {\n// \t\t\tconsole.log('promise fulfilled')\n// \t\t\tsetPersons(response.data)\n// \t\t})\n// \t}, [])\n\n// \tconst [newName, setNewName] = useState('')\n// \tconst [newNumber, setNewNumber] = useState('')\n// \tconst [search, setSearch] = useState('')\n// \tconst [errorMessage, setErrorMessage] = useState(null)\n\n// \tconst handleNoteChange = (event) => {\n\t\t\n// \t\tsetNewName(event.target.value)\n// \t}\n\n// \tconst handleNumChange = (event) => {\n\t\n// \t\tsetNewNumber(event.target.value)\n// \t}\n// \tconst addData = (event) => {\n// \t\tevent.preventDefault()\n\t\t\n// \t\tconst newObject = {\n// \t\t\tname: newName,\n// \t\t\tnumber: newNumber,\n\t\t\t\n// \t\t}\n\n// \t\tvar tempName = false;\n// \t\tfor(let i=0;i<persons.length;i++) {\n// \t\t\tif(persons[i].name === newName) {\n// \t\t\t\ttempName = true;\n// \t\t\t}\n// \t\t}\n\n// \t\tif(tempName === true) {\n\n// \t\t\tvar decision = window.confirm(`${newName} already present, replace number with new one ?`)\n// \t\t\tconst findPerson = persons.find(p => p.name === newName)\n// \t\t\tconst id = findPerson.id\n\n// \t\t\tif(decision === true) {\n\t\t\t\t\n// \t\t\t\tconst dummy = {...findPerson, number: newNumber}\n\n// \t\t\t\taxios\n// \t\t\t\t.put(`baseURL/${id}`, dummy)\n// \t\t\t\t.then(response => {\n// \t\t\t\t\tsetPersons(persons.map(person => person.id !== id ? person : response.data))\n// \t\t\t\t\tsetNewName('')\n// \t\t\t\t\tsetNewNumber('')\n// \t\t\t\t})\n\t\t\t\t\n\t\t\t\t\n// \t\t\t}\n\n// \t\t\telse {\n// \t\t\t\tsetNewName('')\n// \t\t\t\tsetNewNumber('')\n// \t\t\t}\n\n// \t\t}\n\n// \t\telse {\n\n// \t\t\taxios\n// \t\t\t.post(baseURL, newObject)\n// \t\t\t.then(response => {\n// \t\t\t\tconsole.log(response)\n// \t\t\t\tsetPersons(persons.concat(newObject))\n// \t\t\t\tsetNewName('')\n// \t\t\t\tsetNewNumber('')\n// \t\t\t\tsetErrorMessage(`Number Added`)\n// \t\t\t\tsetTimeout(() => {\n// \t\t\t\t\tsetErrorMessage(null)\n// \t\t\t\t}, 5000)\n// \t\t\t})\n// \t\t}\n// \t}\n\n// \tconst filterPersons = persons.filter(person => person.name.toLowerCase().includes(search.trim().toLowerCase())) \n\t\n\t\n\t\n// \tconst searchPerson = (event) => {\n\t\t\n// \t\tsetSearch(event.target.value)\n// \t}\n\n// \tconst handleDelete = (candidate) => {\n\n// \t\tvar decision = window.confirm(`Delete ${candidate.name} ?`)\n\n// \t\tif(decision === true) {\n\n\t\t\t\n// \t\t\tvar id = candidate.id\n// \t\t\tvar name = candidate.name\n\n// \t\t\taxios\n// \t\t\t.delete(baseURL + '/' + id.toString())\n// \t\t\t.then(response => response.data)\n// \t\t\t.then(() => {\n// \t\t\t\tsetPersons(persons.filter((p) => p.id !== id))\n// \t\t\t\tsetErrorMessage(\n// \t\t\t\t\t`${name} was deleted`\n// \t\t\t\t)\n// \t\t\t\tsetTimeout(() => {\n// \t\t\t\t\tsetErrorMessage(null)\n// \t\t\t\t}, 5000)\n// \t\t\t})\t\n\t\t\t\t\n\n// \t\t}\n// \t\telse \n// \t\t\tsetPersons(persons)\n\n// \t}\n\n// \treturn (\n// \t\t\t<div>\n// \t\t\t\t<h2> PhoneBook </h2>\n// \t\t\t\t<Notification message = {errorMessage}/>\n// \t\t\t\t<p> filter shown with <input type=\"text\" value = {search} onChange = {searchPerson}/> </p> \n\n\t\t\t\t\n// \t\t\t\t{filterPersons.length > 0 ? (\n// \t\t\t\t\t\t<ul>\n// \t\t\t\t\t\t\t{filterPersons.map((person, i) => \n// \t\t\t\t\t\t\t\t\t<li key = {i}> {person.name} </li> \n// \t\t\t\t\t\t\t\t)}\n// \t\t\t\t\t\t</ul>\t\n// \t\t\t\t\t) : <div> </div>}\n// \t\t\t\t<form onSubmit={addData}>\n// \t\t\t\t\tname: <input value = {newName} onChange = {handleNoteChange}/>\n// \t\t\t\t\t<br/>\n// \t\t\t\t\tnumber: <input value = {newNumber} onChange = {handleNumChange}/>\n// \t\t\t\t\t<br/>\n// \t\t\t\t\t<button type = 'submit'> Add </button>\n// \t\t\t\t</form>\n// \t\t\t\t<h2> Numbers </h2>\n// \t\t\t\t<ul>\n// \t\t\t\t\t{persons.map((person, i) => {\n// \t\t\t\t\t\treturn <div key = {i}>\n// \t\t\t\t\t\t\t<Name  candidate = {person} /> <button onClick = {() => handleDelete(person)}> DELETE </button>\n\t\t\t\t\t\t\t\n// \t\t\t\t\t\t</div>\n// \t\t\t\t\t})}\n// \t\t\t\t</ul>\n// \t\t\t</div>\n// \t\t)\n// }\n\n// export default App\n\n// import React from 'react'\n// import {useState, useEffect} from 'react'\n// import Note from './Note'\n// import axios from 'axios'\n// import Name from './Name'\n\n// const baseURL = '/api/notes'\n\n// const getAll = () => {\n// \tconst request = axios.get(baseURL)\n// \treturn request.then(response => response.data)\n// }\n// const App =() => {\n\t\n// \tconst [notes, setNotes] = useState([])\n// \tconst [newNote, setNewNote] = useState('')\n// \tconst [showAll, setShowAll] = useState(true)\n// \t// console.log(notes)\n\n// \tuseEffect(() => {\n// \t\taxios.get(baseURL).then(response => {\n// \t\tsetNotes(response.data)\n// \t\t})\n// \t}, [])\n// \tconst addNote = (event) => {\n// \t\tevent.preventDefault()\n// \t\tconst newObject = {\n// \t\t\tid: notes.length + 1,\n// \t\t\tcontent: newNote,\n// \t\t\tdate: new Date().toISOString(),\n// \t\t\timportant: Math.random() < 0.5,\n// \t\t}\n\t\t\n// \t\t// here the original notes array\n// \t\t// is not mutated. A copy of notes\n// \t\t// is created and altering is done\n// \t\taxios\n// \t\t.post(baseURL, newObject)\n// \t\t.then(response => {\n// \t\t\tconsole.log(response)\n// \t\t\tsetNotes(notes.concat(newObject))\n// \t\t\tsetNewNote('')\n// \t\t})\n\t\t\n// \t}\n\n// \t// The event handler is called every time a change \n// \t// occurs in the input element.\n// \tconst handleNoteChange = (event) => {\n\t\t\n// \t\tsetNewNote(event.target.value)\n// \t}\n\n// \tconst notesToShow = showAll\n//     ? notes\n//     : notes.filter(note => note.important)\n\n//     const toggleImportanceOf = (id) => {\n//     \tconsole.log(\"importance of \" + id + \" is toggled\")\n\n//     \tconst url = `baseURL/${id}`\n//     \tconst note = notes.find(n => n.id === id)\n//     \tconsole.log(note)\n//     \tconst changedNote = { ...note, important: !note.important }\n\n// \t  axios\n// \t  .put(url, changedNote)\n// \t  .then(response => {\n// \t    setNotes(notes.map(note => note.id !== id ? note : response.data))\n// \t  })\n//     }\n\n\n// \treturn (\n// \t\t\t<div>\n// \t\t\t\t<h1> Notes </h1>\n// \t\t\t\t<div>\n// \t\t\t\t\t<button onClick = {() => setShowAll(!showAll)}> \n// \t\t\t\t\t\tshow {showAll ? 'important': 'all'}\n// \t\t\t\t\t</button>\n// \t\t\t\t</div>\n\n// \t\t\t\t<ul>\n// \t\t\t\t\t{notesToShow.map((note, i) => {\n// \t\t\t\t\t\treturn <Note key = {i} note = {note} toggleImportance = {() => toggleImportanceOf(note.id)}/>\n// \t\t\t\t\t})}\n// \t\t\t\t</ul>\n\t\t\t\t\n\n\n// \t\t\t\t<form onSubmit = {addNote}>\n// \t\t\t\t\t<input value = {newNote} onChange={handleNoteChange}/>\n// \t\t\t\t\t<button type = 'submit'> Save </button>\n// \t\t\t\t</form>\n// \t\t\t</div>\n// \t\t)\n// }\n\n// export default App\n\n// import React, { useState, useEffect } from 'react'\n// import axios from 'axios'\n// import Name from './Name'\n\n// const Notification = ({message}) => {\n// \tif({message} === null) {\n// \t\treturn null\n// \t}\n\n// \treturn (\n// \t\t<div>\n// \t\t\t<div> {message} </div>\n// \t\t</div>\n// \t\t)\n// }\n\n// const baseURL = '/api/persons'\n// const getAll = () => {\n// \tconst request = axios.get(baseURL)\n// \treturn request.then(response => response.data)\n\n// }\n// const App = () => {\n// \tconst [persons, setPersons] = useState([])\n\n// \tuseEffect(() => {\n// \t\taxios\n// \t\t.get(baseURL)\n// \t\t.then(response => {\n// \t\t\tconsole.log('promise fulfilled')\n// \t\t\tsetPersons(response.data)\n// \t\t})\n// \t}, [])\n\n// \tconst [newName, setNewName] = useState('')\n// \tconst [newNumber, setNewNumber] = useState('')\n// \tconst [search, setSearch] = useState('')\n// \tconst [errorMessage, setErrorMessage] = useState(null)\n\n// \tconst handleNoteChange = (event) => {\n\t\t\n// \t\tsetNewName(event.target.value)\n// \t}\n\n// \tconst handleNumChange = (event) => {\n\t\n// \t\tsetNewNumber(event.target.value)\n// \t}\n// \tconst addData = (event) => {\n// \t\tevent.preventDefault()\n\t\t\n// \t\tconst newObject = {\n// \t\t\tname: newName,\n// \t\t\tphoneNumber: newNumber,\n\t\t\t\n// \t\t}\n\n// \t\tvar tempName = false;\n// \t\tfor(let i=0;i<persons.length;i++) {\n// \t\t\tif(persons[i].name === newName) {\n// \t\t\t\ttempName = true;\n// \t\t\t}\n// \t\t}\n\n// \t\tif(tempName === true) {\n\n// \t\t\tvar decision = window.confirm(`${newName} already present, replace number with new one ?`)\n// \t\t\tconst findPerson = persons.find(p => p.name === newName)\n// \t\t\tconst id = findPerson.id\n\n// \t\t\tif(decision === true) {\n\t\t\t\t\n// \t\t\t\tconst dummy = {...findPerson, phoneNumber: newNumber}\n\n// \t\t\t\taxios\n// \t\t\t\t.put(baseURL + '/' + id.toString(), dummy)\n// \t\t\t\t.then(response => {\n// \t\t\t\t\tsetPersons(persons.map(person => person.id !== id ? person : response.data))\n// \t\t\t\t\tsetNewName('')\n// \t\t\t\t\tsetNewNumber('')\n// \t\t\t\t})\n\t\t\t\t\n\t\t\t\t\n// \t\t\t}\n\n// \t\t\telse {\n// \t\t\t\tsetNewName('')\n// \t\t\t\tsetNewNumber('')\n// \t\t\t}\n\n// \t\t}\n\n// \t\telse {\n\n// \t\t\taxios\n// \t\t\t.post(baseURL, newObject)\n// \t\t\t.then(response => {\n// \t\t\t\tconsole.log(response)\n// \t\t\t\tsetPersons(persons.concat(newObject))\n// \t\t\t\tsetNewName('')\n// \t\t\t\tsetNewNumber('')\n// \t\t\t\tsetErrorMessage(`Number Added`)\n// \t\t\t\tsetTimeout(() => {\n// \t\t\t\t\tsetErrorMessage(null)\n// \t\t\t\t}, 5000)\n// \t\t\t})\n// \t\t}\n// \t}\n\n// \tconst filterPersons = persons.filter(person => person.name.toLowerCase().includes(search.trim().toLowerCase())) \n\t\n\t\n\t\n// \tconst searchPerson = (event) => {\n\t\t\n// \t\tsetSearch(event.target.value)\n// \t}\n\n// \tconst handleDelete = (candidate) => {\n\n// \t\tvar decision = window.confirm(`Delete ${candidate.name} ?`)\n\n// \t\tif(decision === true) {\n\n\t\t\t\n// \t\t\tvar id = candidate.id\n// \t\t\tvar name = candidate.name\n\n// \t\t\taxios\n// \t\t\t.delete(baseURL + '/' + id.toString())\n// \t\t\t.then(response => response.data)\n// \t\t\t.then(() => {\n// \t\t\t\tsetPersons(persons.filter((p) => p.id !== id))\n// \t\t\t\tsetErrorMessage(\n// \t\t\t\t\t`${name} was deleted`\n// \t\t\t\t)\n// \t\t\t\tsetTimeout(() => {\n// \t\t\t\t\tsetErrorMessage(null)\n// \t\t\t\t}, 5000)\n// \t\t\t})\t\n\t\t\t\t\n\n// \t\t}\n// \t\telse \n// \t\t\tsetPersons(persons)\n\n// \t}\n\n// \treturn (\n// \t\t\t<div>\n// \t\t\t\t<h2> PhoneBook </h2>\n// \t\t\t\t<Notification message = {errorMessage}/>\n// \t\t\t\t<p> filter shown with <input type=\"text\" value = {search} onChange = {searchPerson}/> </p> \n\n\t\t\t\t\n// \t\t\t\t{filterPersons.length > 0 ? (\n// \t\t\t\t\t\t<ul>\n// \t\t\t\t\t\t\t{filterPersons.map((person, i) => \n// \t\t\t\t\t\t\t\t\t<li key = {i}> {person.name} </li> \n// \t\t\t\t\t\t\t\t)}\n// \t\t\t\t\t\t</ul>\t\n// \t\t\t\t\t) : <div> </div>}\n// \t\t\t\t<form onSubmit={addData}>\n// \t\t\t\t\tname: <input value = {newName} onChange = {handleNoteChange}/>\n// \t\t\t\t\t<br/>\n// \t\t\t\t\tnumber: <input value = {newNumber} onChange = {handleNumChange}/>\n// \t\t\t\t\t<br/>\n// \t\t\t\t\t<button type = 'submit'> Add </button>\n// \t\t\t\t</form>\n// \t\t\t\t<h2> Numbers </h2>\n// \t\t\t\t<ul>\n// \t\t\t\t\t{persons.map((person, i) => {\n// \t\t\t\t\t\treturn <div key = {i}>\n// \t\t\t\t\t\t\t<Name  candidate = {person} /> <button onClick = {() => handleDelete(person)}> DELETE </button>\n\t\t\t\t\t\t\t\n// \t\t\t\t\t\t</div>\n// \t\t\t\t\t})}\n// \t\t\t\t</ul>\n// \t\t\t</div>\n// \t\t)\n// }\n\n// export default App\n\n// import React from 'react'\n// import {useState, useEffect} from 'react'\n// import Note from './Note'\n// import axios from 'axios'\n// import Name from './Name'\n\n// const baseURL = '/api/notes'\n\n// const getAll = () => {\n// \tconst request = axios.get(baseURL)\n// \treturn request.then(response => response.data)\n// }\n// const App =() => {\n\t\n// \tconst [notes, setNotes] = useState([])\n// \tconst [newNote, setNewNote] = useState('')\n// \tconst [showAll, setShowAll] = useState(true)\n// \t// console.log(notes)\n\n// \tuseEffect(() => {\n// \t\taxios.get(baseURL).then(response => {\n// \t\tsetNotes(response.data)\n// \t\t})\n// \t}, [])\n// \tconst addNote = (event) => {\n// \t\tevent.preventDefault()\n// \t\tconst newObject = {\n// \t\t\tid: notes.length + 1,\n// \t\t\tcontent: newNote,\n// \t\t\tdate: new Date().toISOString(),\n// \t\t\timportant: Math.random() < 0.5,\n// \t\t}\n\t\t\n// \t\t// here the original notes array\n// \t\t// is not mutated. A copy of notes\n// \t\t// is created and altering is done\n// \t\taxios\n// \t\t.post(baseURL, newObject)\n// \t\t.then(response => {\n// \t\t\tconsole.log(response)\n// \t\t\tsetNotes(notes.concat(newObject))\n// \t\t\tsetNewNote('')\n// \t\t})\n\t\t\n// \t}\n\n// \t// The event handler is called every time a change \n// \t// occurs in the input element.\n// \tconst handleNoteChange = (event) => {\n\t\t\n// \t\tsetNewNote(event.target.value)\n// \t}\n\n// \tconst notesToShow = showAll\n//     ? notes\n//     : notes.filter(note => note.important)\n\n//     const toggleImportanceOf = (id) => {\n//     \tconsole.log(\"importance of \" + id + \" is toggled\")\n\n//     \tconst url = baseURL + '/' + id.toString()\n//     \tconst note = notes.find(n => n.id === id)\n//     \tconsole.log(note)\n//     \tconst changedNote = { ...note, important: !note.important }\n\n// \t  axios\n// \t  .put(url, changedNote)\n// \t  .then(response => {\n// \t    setNotes(notes.map(note => note.id !== id ? note : response.data))\n// \t  })\n//     }\n\n\n// \treturn (\n// \t\t\t<div>\n// \t\t\t\t<h1> Notes </h1>\n// \t\t\t\t<div>\n// \t\t\t\t\t<button onClick = {() => setShowAll(!showAll)}> \n// \t\t\t\t\t\tshow {showAll ? 'important': 'all'}\n// \t\t\t\t\t</button>\n// \t\t\t\t</div>\n\n// \t\t\t\t<ul>\n// \t\t\t\t\t{notesToShow.map((note, i) => {\n// \t\t\t\t\t\treturn <Note key = {i} note = {note} toggleImportance = {() => toggleImportanceOf(note.id)}/>\n// \t\t\t\t\t})}\n// \t\t\t\t</ul>\n\t\t\t\t\n\n\n// \t\t\t\t<form onSubmit = {addNote}>\n// \t\t\t\t\t<input value = {newNote} onChange={handleNoteChange}/>\n// \t\t\t\t\t<button type = 'submit'> Save </button>\n// \t\t\t\t</form>\n// \t\t\t</div>\n// \t\t)\n// }\n\n// export default App\n\nimport React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport Name from './Name'\nimport './app.css'\nconst Notification = ({message}) => {\n\tif({message} === null) {\n\t\treturn (\n\t\t\t<div className = 'message'></div>\n\t\t\t)\n\t}\n\n\treturn (\n\t\t\n\t\t\t<div className = \"message\"> {message} </div>\n\t\t\n\t\t)\n}\n\nconst baseURL = '/api/persons'\nconst getAll = () => {\n\tconst request = axios.get(baseURL)\n\treturn request.then(response => response.data)\n\n}\nconst App = () => {\n\tconst [persons, setPersons] = useState([])\n\n\tuseEffect(() => {\n\t\taxios\n\t\t.get(baseURL)\n\t\t.then(response => {\n\t\t\tconsole.log('promise fulfilled')\n\t\t\tsetPersons(response.data)\n\t\t})\n\t}, [])\n\n\tconst [newName, setNewName] = useState('')\n\tconst [newNumber, setNewNumber] = useState('')\n\tconst [search, setSearch] = useState('')\n\tconst [errorMessage, setErrorMessage] = useState(null)\n\n\tconst handleNoteChange = (event) => {\n\t\t\n\t\tsetNewName(event.target.value)\n\t}\n\n\tconst handleNumChange = (event) => {\n\t\n\t\tsetNewNumber(event.target.value)\n\t}\n\tconst addData = (event) => {\n\t\tevent.preventDefault()\n\t\t\n\t\tconst newObject = {\n\t\t\tname: newName,\n\t\t\tphoneNumber: newNumber,\n\t\t\t\n\t\t}\n\n\t\tvar tempName = false;\n\t\tfor(let i=0;i<persons.length;i++) {\n\t\t\tif(persons[i].name === newName) {\n\t\t\t\ttempName = true;\n\t\t\t}\n\t\t}\n\n\t\tif(tempName === true) {\n\n\t\t\tvar decision = window.confirm(`${newName} already present, replace number with new one ?`)\n\t\t\tconst findPerson = persons.find(p => p.name === newName)\n\t\t\tconst id = findPerson.id\n\n\t\t\tif(decision === true) {\n\t\t\t\t\n\t\t\t\tconst dummy = {...findPerson, phoneNumber: newNumber}\n\n\t\t\t\taxios\n\t\t\t\t.put(baseURL + '/' + id.toString(), dummy)\n\t\t\t\t.then(response => {\n\t\t\t\t\tsetPersons(persons.map(person => person.id !== id ? person : response.data))\n\t\t\t\t\tsetNewName('')\n\t\t\t\t\tsetNewNumber('')\n\t\t\t\t})\n\t\t\t\t.catch(error => {\n\t\t\t\t\tsetErrorMessage(error)\n\t\t\t\t\tsetNewName('')\n\t\t\t\t\tsetNewNumber('')\n\t\t\t\t})\n\t\t\t\t\n\t\t\t\t\n\t\t\t}\n\n\t\t\telse {\n\t\t\t\tsetNewName('')\n\t\t\t\tsetNewNumber('')\n\t\t\t}\n\n\t\t}\n\n\t\telse {\n\n\t\t\taxios\n\t\t\t.post(baseURL, newObject)\n\t\t\t.then(response => {\n\t\t\t\tconsole.log(response)\n\t\t\t\tsetPersons(persons.concat(newObject))\n\t\t\t\tsetNewName('')\n\t\t\t\tsetNewNumber('')\n\t\t\t\tsetErrorMessage(`Number Added`)\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tsetErrorMessage(null)\n\t\t\t\t}, 5000)\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\t// console.log(error.response.data)\n\t\t\t\tconst errorMsg = error.response.data.error\n\t\t\t\tsetNewName('')\n\t\t\t\tsetNewNumber('')\n\t\t\t\tsetErrorMessage(errorMsg)\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tsetErrorMessage(null)\n\t\t\t\t}, 5000)\n\n\t\t\t})\n\t\t}\n\t}\n\n\tconst filterPersons = persons.filter(person => person.name.toLowerCase().includes(search.trim().toLowerCase())) \n\t\n\t\n\t\n\tconst searchPerson = (event) => {\n\t\t\n\t\tsetSearch(event.target.value)\n\t}\n\n\tconst handleDelete = (candidate) => {\n\n\t\tvar decision = window.confirm(`Delete ${candidate.name} ?`)\n\n\t\tif(decision === true) {\n\n\t\t\t\n\t\t\tvar id = candidate.id\n\t\t\tvar name = candidate.name\n\n\t\t\taxios\n\t\t\t.delete(baseURL + '/' + id.toString())\n\t\t\t.then(response => response.data)\n\t\t\t.then(() => {\n\t\t\t\tsetPersons(persons.filter((p) => p.id !== id))\n\t\t\t\tsetErrorMessage(\n\t\t\t\t\t`${name} was deleted`\n\t\t\t\t)\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tsetErrorMessage(null)\n\t\t\t\t}, 5000)\n\t\t\t})\t\n\t\t\t\t\n\n\t\t}\n\t\telse \n\t\t\tsetPersons(persons)\n\n\t}\n\n\treturn (\n\t\t\t<div className = 'background'>\n\t\t\t\t<h2 className = 'heading'> PhoneBook </h2>\n\t\t\t\t<Notification  message = {errorMessage}/>\n\t\t\t\t<p className = 'font1'> Filter shown with <input type=\"text\" value = {search} onChange = {searchPerson}/> </p> \n\n\t\t\t\t\n\t\t\t\t{filterPersons.length > 0 ? (\n\t\t\t\t\t\t<ul>\n\t\t\t\t\t\t\t{filterPersons.map((person, i) => \n\t\t\t\t\t\t\t\t\t<li className = 'text' key = {i}> {person.name} </li> \n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</ul>\t\n\t\t\t\t\t) : <div> </div>}\n\t\t\t\t<form className = 'form-input' onSubmit={addData}>\n\t\t\t\t\t<label className = 'label'> Name </label><input value = {newName} onChange = {handleNoteChange}/>\n\t\t\t\t\t<br/>\n\t\t\t\t\t<label className = 'label'> PhoneNumber </label><input value = {newNumber} onChange = {handleNumChange}/>\n\t\t\t\t\t<br/>\n\t\t\t\t\t<button type = 'submit' className = 'btn'> Add </button>\n\t\t\t\t</form>\n\t\t\t\t<h2 className = 'heading1'> Numbers </h2>\n\t\t\t\t<ul>\n\t\t\t\t\t{persons.map((person, i) => {\n\t\t\t\t\t\treturn <div key = {i}>\n\t\t\t\t\t\t\t<Name candidate = {person}/> <button className = 'btn' onClick = {() => handleDelete(person)}> DELETE </button> \n\t\t\t\t\t\t\t\n\t\t\t\t\t\t</div>\n\t\t\t\t\t})}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t)\n}\n\nexport default App"," import React, {useState} from 'react'\nimport ReactDom from 'react-dom';\n\n// capital letter react function = react component\n// it will return JSX\n\n// function Greeting() {\n// \treturn <h1>This is Shreyansh and this is my first component </h1>;\n// }\n\n// const firstBook = {\n// \tImage: \"https://images-na.ssl-images-amazon.com/images/I/51cRlGQ4eLL._SY300_.jpg\",\n// \tTitle: \"How the One-Armed Sister Sweeps Her House\",\n// \tAuthor: \"Cherie Jones\",\n// };\n\n\n// function Booklist() {\n// \treturn (\n// \t\t<section>\n// \t\t\t<Book img = {firstBook.Image} Title = {firstBook.Title} Author = {firstBook.Author}>\n// \t\t\t</Book>\t\n// \t\t</section>\n// \t\t);\n// }\n\n// const Book = (props) => {\n// \treturn (\n// \t\t\t<section>\n// \t\t\t\t<img src = {props.img}/>\n// \t\t\t\t<h1> {props.Title} </h1>\n// \t\t\t\t<h4> {props.Author} </h4>\n// \t\t\t</section>\n// \t\t)\n// }\n\n// ReactDom.render(<Booklist/>, document.getElementById('root'));\n\n//   const course = {\n//     name: 'Half Stack application development',\n//     parts: [\n//       {\n//         name: 'Fundamentals of React',\n//         exercises: 10\n//       },\n//       {\n//         name: 'Using props to pass data',\n//         exercises: 7\n//       },\n//       {\n//         name: 'State of a component',\n//         exercises: 14\n//       }\n//     ]\n//   }\n\n\n// const Header = (props) => {\n\n// \treturn (\n// \t\t\t<h1> {props.course} </h1>\n// \t\t)\n// }\n\n\n// const Content = (props) => {\n// \treturn (\n// \t\t<div>\n// \t\t\t<p>\n// \t\t\t\t{props.parts[0].name} {props.parts[0].exercises}\n// \t\t\t</p>\n// \t\t\t<p>\n// \t\t\t\t{props.parts[1].name} {props.parts[1].exercises}\n// \t\t\t</p>\n// \t\t\t<p>\n// \t\t\t\t{props.parts[2].name} {props.parts[2].exercises}\n// \t\t\t</p>\n// \t\t</div>\n// \t)\n// }\n\n// const Total = (props) => {\n// \tconsole.log(props);\n// \treturn (\n// \t\t<div>\n// \t\t\t<p>\n// \t\t\t\tExercise {props.parts[0].exercises + props.parts[1].exercises + props.parts[2].exercises}\n// \t\t\t</p>\n// \t\t</div>\n// \t)\n// }\n\n// const App = () => {\n//   ///const-definitions\n\n//   return (\n//     <div>\n//       <Header course={course.name} />\n//       <Content parts={course.parts} />\n//       <Total parts={course.parts} />\n//     </div>\n//   )\n// }\n\n\n// ReactDom.render(<App/>, document.getElementById('root'));\n\n// const arto = {\n// \tname : 'shreyansh',\n// \tage: 22,\n// \teducation: 'Btech',\n// \tgreet: function() {\n// \t\tconsole.log('hello, my name is ' + this.name);\n// \t},\n// \tdoaddition: function(a, b) {\n// \t\tconsole.log(a+b);\n// \t}\n// }\n\n// // setTimeout(arto.greet(), 1000);\n\n// arto.groolder = function() {\n// \tthis.age += 1;\n// }\n\n// arto.groolder();\n// console.log(arto.age);\n\n// const refaddition = arto.doaddition; // reference addition\n// refaddition(10, 25);\n\n/*\nWhen calling the method through a reference, \nthe method loses knowledge of what was the original this. \nContrary to other languages, in JavaScript the value\nof this is defined based on how the method is called. \nWhen calling the method through a reference the value \nof this becomes the so-called global object and the end\nresult is often not what the software developer had originally intended\n*/\n\n// class Person {\n// \tconstructor(name, age) {\n// \t\tthis.name = name;\n// \t\tthis.age = age;\n// \t}\n// \tgreet() {\n// \t\tconsole.log('hello, my name is ' + this.name);\n// \t}\n// }\n\n// const adam = new Person('Adam bohra', 23);\n// adam.greet();\n\n// console.log('10' + 20);\n\n// function makeAdder(a) {\n\n//   return function(b) {\n//      console.log(a + b);\n//   };\n// }\n\n// var add5 = makeAdder(5);\n// var add20 = makeAdder(20);\n// add5(6); // ?\n// add20(7); // ?\n\n// const Hello = (props) => {\n// \tconst bornYear = () => {\n// \t\tconst yearNow = new Date().getFullYear()\n// \t\treturn yearNow - props.age\n// \t\t}\n\n//   \treturn (\n//     \t<div>\n      \t\n//       \t\t<p>\n//         \t\tHello {props.name}, you are {props.age} years old\n//       \t\t</p>\n      \t\t\n//       \t\t<p>\n//       \t\t \tSo you were probably born in {bornYear()} \n//       \t\t</p>\n    \t\n//     \t</div>\n//   \t)\n//}\n\n\n// const App = (props) => {\n// \tconst counter = props.counter;\n// \treturn (\n// \t\t\t<div> {counter} </div>\n// \t\t)\n// }\n\n\n// let counter = 1;\n\n// const refresh = () => {\n// \tReactDom.render(<App counter = {counter}/>, document.getElementById('root'));\n// }\n\n/// setInterval(() => {\n//   refresh()\n//   counter += 1\n// }, 1000)\n\n// const App = () => {\n// \tconst [ counter, setCounter ] = useState(0)\n\n// \tconsole.log(counter);\n// \tsetTimeout(\n// \t  () => setCounter(counter + 1),\n// \t  1000\n// \t)\n\n// \treturn (\n// \t\t\t<div> {counter} </div>\n// \t\t)\n// }\n\n// const App = () => {\n// \tconst [counter, setCounter] = useState(0)\n\n// \tconst increase = () => {\n// \t\treturn setCounter(counter+1)\n// \t}\n\n// \tconst reset = () => {\n// \t\treturn setCounter(0);\n// \t}\n// \treturn (\n// \t\t\t<div>\n// \t\t\t\t<div> {counter} </div>\n// \t\t\t\t<button onClick = {increase}> \n// \t\t\t\t\tIncrement\n// \t\t\t\t</button>\n\n// \t\t\t\t<button onClick = {reset}> Reset </button>\n// \t\t\t</div>\n// \t\t)\n// }\n\n// const Button = (props) => {\n\n// \treturn (\n// \t\t\t<button onClick = {props.handleclick}> {props.text} </button>\n// \t\t)\n// }\n\n// const App = () => {\n\n// \tconst [counter, setCounter] = useState(0);\n\n// \tconst increase = () => {\n// \t\treturn setCounter(counter+1)\n// \t}\n// \tconst decrease = () => {\n// \t\treturn setCounter(counter-1)\n// \t}\n// \tconst reset = () => {\n// \t\treturn setCounter(0)\n// \t}\n\n// \treturn (\n// \t\t\t<div>\n// \t\t\t\t<div> {counter} </div>\n// \t\t\t\t<Button handleclick = {increase} \n// \t\t\t\t\ttext = 'Increase'>\n// \t\t\t\t</Button>\t\n\n// \t\t\t\t<Button handleclick = {decrease} \n// \t\t\t\t\ttext = 'Decrease'>\n// \t\t\t\t</Button>\n\n// \t\t\t\t<Button handleclick = {reset}\n// \t\t\t\t\ttext = 'Reset'>\n// \t\t\t\t</Button>\n// \t\t\t</div>\n// \t\t)\n// }\n\n// const App = () => {\n// \tconst [left, setleft] = useState(0)\n// \tconst [right, setright] = useState(0)\n\n// \treturn (\n// \t\t\t<div>\n// \t\t\t\t<div>{left}</div>\n// \t\t\t\t<button onClick = {() => setleft(left+1)}> Left </button>\n// \t\t\t\t<div> {right}</div>\n// \t\t\t\t<button onClick = {() => setright(right+1)}> Right </button>\n// \t\t\t</div>\n// \t\t)\n// }\n\n// const App = () => {\n\n// \tconst [click, setClick] = useState({\n// \t\tleft: 0,\n// \t\tright: 0 \n// \t})\n\n// \tconst handleleftclick = () => {\n// \t\tconst newclick = {\n// \t\t\tleft: click.left+1,\n// \t\t\tright: click.right\n// \t\t}\n// \t\tsetClick(newclick)\n// \t}\n\n// \tconst handlerightclick = () => {\n// \t\tconst newclick = {\n// \t\t\tleft: click.left,\n// \t\t\tright: click.right+1\n// \t\t}\n// \t\tsetClick(newclick)\n// \t}\n\n// \treturn (\n// \t\t\t<div>\n// \t\t\t\t{click.left}\n// \t\t\t\t<button onClick = {handleleftclick}> Left </button>\n// \t\t\t\t{click.right}\n// \t\t\t\t<button onClick = {handlerightclick}> Right </button>\n// \t\t\t</div>\n// \t\t)\n// }\n\n// const History = (props) => {\n// \tif(props.allclick.length == 0) {\n// \t\treturn (\n// \t\t\t\t<div>\n// \t\t\t\t\t<p> No Button Pressed </p>\n// \t\t\t\t</div>\n// \t\t\t)\n// \t}\n\n// \treturn (\n// \t\t\t<div>\n// \t\t\t\t<p> Pressing History is {props.allclick.join(' ')} </p>\n// \t\t\t</div>\n// \t\t)\n// }\n\n// const App = () => {\n// \tconst [left, setleft] = useState(0)\n// \tconst [right, setright] = useState(0)\n// \tconst [allclick, setAll] = useState([])\n\n// \tconst increaseLeft = () => {\n// \t\tsetAll(allclick.concat('L'))\n// \t\tsetleft(left+1)\n// \t}\n\n// \tconst increaseRight = () => {\n// \t\tsetAll(allclick.concat('R'))\n// \t\tsetright(right+1)\n// \t}\n// \treturn (\n// \t\t\t<div>\n// \t\t\t\t{left}\n//     \t\t\t<button onClick = {increaseLeft}> Left </button>\n//     \t\t\t{right}\n//     \t\t\t<button onClick = {increaseRight}> Right </button>\n\n//     \t\t\t<History allclick = {allclick}/>\n// \t\t\t</div>\n// \t\t)\n\n// }\n\n// const App = () => {\n\n// \tconst hello = (who) => {\n\n// \t\tconst handler = () => {\n// \t\t\tconsole.log('hello', who)\n\n// \t\t}\n\n// \t\treturn handler\n// \t}\n// \treturn (\n// \t\t\t<div>\n// \t\t\t\t<button onClick = {hello('react')}> React </button>\n// \t\t\t</div>\n// \t\t)\n// }\n\n// const App = () => {\n// \tconst [value, setValue] = useState(10)\n\n// \tconst setToValue = (newValue) => {\n// \t\tconst handler = () => {\n// \t\t\tsetValue(newValue)\n// \t\t}\n// \t\treturn handler\n// \t}\n\n// \treturn (\n// \t\t\t<div>\n// \t\t\t\t{value}\n// \t\t\t\t<button onClick = {setToValue(1000)}> Reset </button>\n// \t\t\t\t<button onClick = {setToValue(value+1)}> Increase </button>\n// \t\t\t</div>\n// \t\t)\n// }\n\n\n// Never define components inside components\n\n// const Display = props => <div>{props.value}</div>\n\n// const Button = (props) => (\n//   <button onClick={props.handleClick}>\n//     {props.text}\n//   </button>\n// )\n\n// const App = () => {\n//   const [value, setValue] = useState(10)\n\n//   const setToValue = newValue => {\n//     setValue(newValue)\n//   }\n\n// \treturn (\n// \t<div>\n// \t  <Display value={value} />\n// \t  <Button handleClick={() => setToValue(1000)} text=\"thousand\" />\n// \t  <Button handleClick={() => setToValue(0)} text=\"reset\" />\n// \t  <Button handleClick={() => setToValue(value + 1)} text=\"increment\" />\n// \t</div>\n// \t)\n// }\n\n// const Print = (props) => {\n\n// \treturn (\n// \t\t\t<div>\n// \t\t\t\t<p> {props.text} {props.val} </p>\n// \t\t\t</div>\n// \t\t)\n// }\n\n// const Statistics = (props) => {\n\n// \tconst sum = props.val1 + props.val2 + props.val3\n\n// \tif(sum == 0) {\n// \t\treturn (\n// \t\t\t\t<div>\n// \t\t\t\t\t<p> No feedback given </p>\n// \t\t\t\t</div>\n// \t\t\t)\n// \t}\n\n// \treturn (\n// \t\t\t<div>\n// \t\t\t\t<Print text = {props.text1} val = {props.val1}/>\n// \t\t\t\t<Print text = {props.text2} val = {props.val2}/> \n// \t\t\t\t<Print text = {props.text3} val = {props.val3}/>\n// \t\t\t\t<Print text = 'all' val = {props.val1 + props.val2 + props.val3}/>\n// \t\t\t\t<Print text = 'average' val = {(props.val1 + props.val2 + props.val3)/3}/>\n// \t\t\t\t<Print text = 'positive' val = {props.val1*100/(props.val1 + props.val2 + props.val3)}/>\n// \t\t\t</div>\n// \t\t)\n// }\n\n\n// const App = () => {\n\n// \tconst [good, setgood] = useState(0)\n// \tconst [neutral, setneutral] = useState(0)\n// \tconst [bad, setbad] = useState(0)\n\n// \tconst goodCounter = () => {\n\t\t\n// \t\tconst handler = () => {\n// \t\t\tsetgood(good+1)\n// \t\t}\n// \t\treturn handler\n// \t}\n\n// \tconst neutralCounter = () => {\n\t\t\n// \t\tconst handler = () => {\n// \t\t\tsetneutral(neutral+1)\n// \t\t}\n// \t\treturn handler\n// \t}\n\n// \tconst badCounter = () => {\n\t\t\n// \t\tconst handler = () => {\n// \t\t\tsetbad(bad+1)\n// \t\t}\n// \t\treturn handler\n// \t}\n\n// \treturn (\n// \t\t\t<div>\n// \t\t\t\t<h1> Give Feedback </h1>\n\n// \t\t\t\t<button onClick = {goodCounter(0)}> good </button>\n// \t\t\t\t<button onClick = {neutralCounter(0)}> neutral </button>\n// \t\t\t\t<button onClick = {badCounter(0)}> bad </button>\n\n// \t\t\t\t<h2> Statistics </h2> \n\n// \t\t\t\t<Statistics text1 = 'good' text2 = 'bad' text3 = 'neutral' val1 = {good} val2 = {bad} val3 = {neutral}/>\n// \t\t\t</div>\n// \t\t)\n// }\n\n\n\n\n// const App = () => {\n// \tconst [selected, setSelected] = useState(0)\n// \tconst [vote, setVote] = useState(new Array(6).fill(0))\n// \tconst tempCopy = [...vote]\n\t\n// \tconst generateRandomAnecdote = () => {\n// \t\tsetSelected(Math.floor(Math.random() * (anecdotes.length)))\n// \t}\n\n// \tconst getVotes = () => {\n// \t\ttempCopy[selected]+=1\n// \t\tsetVote(tempCopy)\n// \t}\n\n// \tconst getMaxVotes = (v) => {\n\n// \t\tlet maxVotes = 0;\n// \t\tlet maxIndex = 0;\n\n// \t\tfor(let i=0;i<v.length;i++) {\n// \t\t\tif(v[i] > maxVotes) {\n// \t\t\t\tmaxVotes = v[i]\n// \t\t\t\tmaxIndex = i\n// \t\t\t}\n// \t\t}\n\n// \t\treturn [maxVotes, maxIndex]\n// \t}\n\n// \tconst [maxVotes, maxIndex] = getMaxVotes(vote)\n// \treturn (\n// \t\t\t<div>\n// \t\t\t\t<p> {anecdotes[selected]} </p>\n// \t\t\t\t<p> has {tempCopy[selected]} votes </p>\n// \t\t\t\t<button onClick = {generateRandomAnecdote}> Next </button>\n// \t\t\t\t<button onClick = {getVotes}> Vote </button>\n// \t\t\t\t<h1> Anecdote with most votes </h1>\n// \t\t\t\t<p> {anecdotes[maxIndex]} </p>\n// \t\t\t\t<p> has {maxVotes} votes </p>\n// \t\t\t</div>\n// \t\t)\n// }\n\n\n\n// const anecdotes = [\n//   'If it hurts, do it more often',\n//   'Adding manpower to a late software project makes it later!',\n//   'The first 90 percent of the code accounts for the first 90 percent of the development time...The remaining 10 percent of the code accounts for the other 90 percent of the development time.',\n//   'Any fool can write code that a computer can understand. Good programmers write code that humans can understand.',\n//   'Premature optimization is the root of all evil.',\n//   'Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.'\n// ]\n\n// const Course = (props) => {\n\n// \t// var sum = 0\n// \t// for(let i=0;i<props.course.parts.length;i++) {\n// \t// \tsum += props.course.parts[i].exercises\n// \t// }\n\t\n// \tvar total = props.course.parts.reduce(function(sum, item) {\n// \t\treturn sum += item.exercises\n// \t}, 0)\n// \treturn (\n// \t\t\t<div>\n// \t\t\t\t<h1> {props.course.name} </h1>\n// \t\t\t\t<ul>\n// \t\t\t\t\t{props.course.parts.map((item,i) => {\n// \t\t\t\t\t\treturn <li key = {i}> {item.name} {item.exercises} </li>\n// \t\t\t\t\t})}\n// \t\t\t\t</ul>\n// \t\t\t\t<h3> total of {total} exercises </h3>\n// \t\t\t</div>\n// \t\t)\n// }\n\n// const Total = (props) => {\n\n// \tconsole.log(props.curcourse)\n// \tvar total = props.curcourse.reduce(function(sum, item) {\n// \t\treturn sum += item.exercises\n// \t}, 0)\n// \treturn (\n// \t\t\t<h2> total of {total} exercises </h2>\n// \t\t)\n// }\n\n// const Course = (props) => {\n// \tconst course = props.course\n\n// \treturn (\n// \t\t\t<div>\n// \t\t\t\t{course.map((item, i) => {\n// \t\t\t\t\treturn (\n// \t\t\t\t\t\t<div>\n// \t\t\t\t\t\t\t<h1 key = {i}> {item.name} </h1>\n// \t\t\t\t\t\t\t<ul> \n// \t\t\t\t\t\t\t\t{item.parts.map((it, i) => {\n// \t\t\t\t\t\t\t\t\treturn <li key = {i}> {it.name} {it.exercises} </li>\n// \t\t\t\t\t\t\t})}\n// \t\t\t\t\t\t\t</ul>\n// \t\t\t\t\t\t\t<Total curcourse = {item.parts}/>\n// \t\t\t\t\t\t</div>\n// \t\t\t\t\t\t)\n// \t\t\t\t})} \n// \t\t\t</div>\n// \t\t)\n// }\n\n// import App from './components/App';\n\n// const courses = [\n//   {\n//     name: 'Half Stack application development',\n//     id: 1,\n//     parts: [\n//       {\n//         name: 'Fundamentals of React',\n//         exercises: 10,\n//         id: 1\n//       },\n//       {\n//         name: 'Using props to pass data',\n//         exercises: 7,\n//         id: 2\n//       },\n//       {\n//         name: 'State of a component',\n//         exercises: 14,\n//         id: 3\n//       },\n//       {\n//         name: 'Redux',\n//         exercises: 11,\n//         id: 4\n//       }\n//     ]\n//   }, \n//   {\n//     name: 'Node.js',\n//     id: 2,\n//     parts: [\n//       {\n//         name: 'Routing',\n//         exercises: 3,\n//         id: 1\n//       },\n//       {\n//         name: 'Middlewares',\n//         exercises: 7,\n//         id: 2\n//       }\n//     ]\n//   }\n// ]\n\n\n// ReactDom.render(<App courses={courses}/>, document.getElementById('root'));\n\nimport App from './components/App';\n\n// const promise = axios.get('http://localhost:3001/notes')\n\n// promise.then(response => {\n// \tconsole.log(response)\n// })\n\n// axios.get('http://localhost:3001/notes').then(response => {\n// \tconst notes = response.data\n// \tReactDom.render(<App notes = {notes}/>, document.getElementById('root'));\n// })\n\nReactDom.render(<App />, document.getElementById('root'))"],"sourceRoot":""}